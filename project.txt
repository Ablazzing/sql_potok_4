Проект "Кинотеатр ки-но"
Владелец кинотеатра пришел к вам с просьбой создать приложение которое позволит показывать расписание сеансов кино, покупать билеты на определенные сеансы. Вам нужно создать api, которое позволит админстратору кинотеатра создавать кино, сеансы и смотреть проданные билеты. Посетитель же сможет смотреть какие фильмы и сеансы в кинотеатре, а также покупать билеты.

Этап №1 Проектирование схемы базы данных. Нам необходимо хранить данные о показываемых фильмах, сеансах, проданных билетах. Для этого создадим базу данных и схему в бд:
1. Создать базу данных cinema.
2. Создать сущность фильм (с характеристиками): уникальный идентификатор, наименование фильма, описание фильма.
3. В нашем кинотеатре только один зал, поэтому создадим схему рассадки.
Создать сущность место: уникальный идентификатор, номер места (например "А1")
4. Создать сущность сеанс: уникальный идентификатор, идентификатор фильма(связь), время, цена.
5. Создать сущность билет: уникальный идентификатор, идентификатор места (связь), идентификатор сеанса (связь), куплен или нет.
Графическое отображение того, что должно получиться здесь: https://drawsql.app/teams/vtv-1/diagrams/cinema
6. Создать репозиторий и положить скрипты в файл init.sql.
7. Отправить код на Github.
8. Запустить создание таблиц в базе данных.

Этап №2 Создание java приложения. На этом этапе нужно создать spring-boot приложение, описать все наши таблицы классами - Enity. После этого сделаем получение каждой сущности по id.
1. Создать spring boot приложение, с следующими зависимостями: spring-web, lombok, spring-data-jdbc, postgresql driver, CHECKSTYLE плагин.
2. Прописать настройки для подключения к базе данных в application.yaml: url, username, password, driver. Перенести init.sql из этапа №1 п.6 в ресурсы.
3. Запустить проект и проверить, что есть подключение к бд.
4. Создать классы в Java, которые будут описывать записи из таблиц в базах данных:
4.1 Сущность Movie - те же поля, что и в таблице.
4.2 Сущность Session - id, дата+время, цена, экземпляр класса фильм(!)
4.3. Сущность Place - те же поля, что и в таблице.
4.4. Сущность Ticket - id, экземпляр класса сеанс(!), экземпляр класса место(!), куплен или нет.
5. Создать репозиторий для работы фильмами, реализовать в нем получение записи по id и преобразовать полученную запись в экземпляр класса Movie. 
5.1. Метод поиска по id должен возвращать Optional - если записи с таким id нет, метод не должен выкидывать ошибку!
6. Создать репозиторий для работы с сессиями, реализовать в нем получение записи по id и преобразовать в экземпляр класса Session.
6.1 Так как session хранит в себе movie_id (идентификатор фильма), то необходимо воспользоваться воспользоваться методом получения фильма из пункта 5. 
6.2. Требования к возврату сессии аналогичны пункту 5.1.
7. Создать репозиторий для работы с местом, реализовать в нем получение записи по id и преобразовать в экземпляр класса Place.
7.1 Требования к возврату места аналогичны пункту 5.1.
8. Создать репозиторий для работы с билетом, реализовать в нем получение записи по id и преобразовать в экземпляр класса Ticket. 
8.1 Так как экземпляр класса Ticket содержит в себе session_id и place_id, то воспользоваться методами из пунктов 6 и 7 соответственно.
8.2 Требования аналогичны пункту 5.1.

--Остальные этапы проверяются и будут прибавляться до 20.01.2025
